(function(/*! Brunch !*/) {
  'use strict';

  var globals = typeof window !== 'undefined' ? window : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};

  var has = function(object, name) {
    return ({}).hasOwnProperty.call(object, name);
  };

  var expand = function(root, name) {
    var results = [], parts, part;
    if (/^\.\.?(\/|$)/.test(name)) {
      parts = [root, name].join('/').split('/');
    } else {
      parts = name.split('/');
    }
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var dir = dirname(path);
      var absolute = expand(dir, name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    definition(module.exports, localRequire(name), module);
    var exports = cache[name] = module.exports;
    return exports;
  };

  var require = function(name, loaderPath) {
    var path = expand(name, '.');
    if (loaderPath == null) loaderPath = '/';

    if (has(cache, path)) return cache[path];
    if (has(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has(cache, dirIndex)) return cache[dirIndex];
    if (has(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '" from '+ '"' + loaderPath + '"');
  };

  var define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  var list = function() {
    var result = [];
    for (var item in modules) {
      if (has(modules, item)) {
        result.push(item);
      }
    }
    return result;
  };

  globals.require = require;
  globals.require.define = define;
  globals.require.register = define;
  globals.require.list = list;
  globals.require.brunch = true;
})();
require.register("helpers/view_helper", function(exports, require, module) {
Handlebars.registerHelper('pluralize', function(count, fn) {
  var pluralized, string;

  string = fn();
  pluralized = count === 1 ? string : "" + string + "s";
  return new Handlebars.SafeString(pluralized);
});

});

;require.register("helpers/view_helper", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
Handlebars.registerHelper('pluralize', function(count, fn) {
  // var pluralized, string;
  // string = fn();
  // pluralized = count === 1 ? string : "" + string + "s";
  // return new Handlebars.SafeString(pluralized);
});

});

;require.register("initialize", function(exports, require, module) {
var Router;

Router = require('routers/router');

$(function() {
  window.router = new Router();
  return Backbone.history.start({
    pushState: true
  });
});

});

;require.register("initialize", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var Router;

Router = require('routers/router');

$(function() {
  window.router = new Router();
  return Backbone.history.start({
    pushState: true
  });
});

});

;require.register("models/todo", function(exports, require, module) {
var Todo, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = Todo = (function(_super) {
  __extends(Todo, _super);

  function Todo() {
    _ref = Todo.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Todo.prototype.defaults = {
    content: 'empty',
    done: false,
    tag: 'general'
  };

  Todo.prototype.urlRoot = '/todos';

  Todo.prototype.validate = function(attrs) {
    if (attrs.content === 'empty') {
      return console.log('the todo needs a title');
    }
  };

  Todo.prototype.toggle = function() {
    return this.save({
      done: !this.get('done')
    });
  };

  Todo.prototype.clear = function() {
    return this.destroy();
  };

  return Todo;

})(Backbone.Model);

});

;require.register("models/todo", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var Todo, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = Todo = (function(_super) {
  __extends(Todo, _super);

  function Todo() {
    _ref = Todo.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Todo.prototype.defaults = {
    content: 'empty',
    done: false,
    tag: 'general'
  };

  Todo.prototype.urlRoot = '/todos';

  Todo.prototype.validate = function(attrs) {
    if (attrs.content === 'empty') {
      return console.log('the todo needs a title');
    }
  };

  Todo.prototype.toggle = function() {
    return this.save({
      done: !this.get('done')
    });
  };

  Todo.prototype.clear = function() {
    return this.destroy();
  };

  return Todo;

})(Backbone.Model);

});

;require.register("models/todos", function(exports, require, module) {
var Todo, Todos, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Todo = require('./todo');

module.exports = Todos = (function(_super) {
  __extends(Todos, _super);

  function Todos() {
    _ref = Todos.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Todos.prototype.model = Todo;

  Todos.prototype.initialize = function() {
    return this.localStorage = new Store('todos');
  };

  Todos.prototype.done = function() {
    return this.filter(function(todo) {
      return todo.get('done');
    });
  };

  Todos.prototype.remaining = function() {
    return this.without.apply(this, this.done());
  };

  Todos.prototype.nextOrder = function() {
    if (!this.length) {
      return 1;
    }
    return this.last().get('order') + 1;
  };

  Todos.prototype.comparator = function(todo) {
    return todo.get('order');
  };

  Todos.prototype.clearCompleted = function() {
    return _.each(this.done(), function(todo) {
      return todo.destroy();
    });
  };

  return Todos;

})(Backbone.Collection);

});

;require.register("models/todos", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var Todo, Todos, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Todo = require('./todo');

module.exports = Todos = (function(_super) {
  __extends(Todos, _super);

  function Todos() {
    _ref = Todos.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Todos.prototype.model = Todo;

  Todos.prototype.initialize = function() {
    return this.localStorage = new Store('todos');
  };

  Todos.prototype.done = function() {
    return this.filter(function(todo) {
      return todo.get('done');
    });
  };

  Todos.prototype.remaining = function() {
    return this.without.apply(this, this.done());
  };

  Todos.prototype.nextOrder = function() {
    if (!this.length) {
      return 1;
    }
    return this.last().get('order') + 1;
  };

  Todos.prototype.comparator = function(todo) {
    return todo.get('order');
  };

  Todos.prototype.clearCompleted = function() {
    return _.each(this.done(), function(todo) {
      return todo.destroy();
    });
  };

  return Todos;

})(Backbone.Collection);

});

;require.register("off-screen-nav", function(exports, require, module) {
var EffecktOffScreenNav = {

  nav: $("#effeckt-off-screen-nav"),
  closeButton: $("#effeckt-off-screen-nav-close"),

  init: function() {

    this.bindUIActions();

  },

  bindUIActions: function() {

    $(".off-screen-nav-button, #effeckt-off-screen-nav-close").on("click", function() {
      var type = $(this).data("effeckt");
      var threedee = $(this).data("threedee");
      EffecktOffScreenNav.toggleNav(type, threedee);
    });

  },

  toggleNav: function(type, threedee) {

    // Show
    if (!EffecktOffScreenNav.nav.hasClass("effeckt-off-screen-nav-show")) {

      EffecktOffScreenNav.nav.addClass(type);
      EffecktOffScreenNav.closeButton.data("effeckt", type);

      if (threedee) {
        $("html").addClass("md-perspective");
      }

      setTimeout(function() {
        EffecktOffScreenNav.nav.addClass("effeckt-off-screen-nav-show");
      }, 500);

    // Hide
    } else {

      EffecktOffScreenNav.nav.removeClass("effeckt-off-screen-nav-show");

      setTimeout(function() {

        EffecktOffScreenNav.nav.removeClass(EffecktOffScreenNav.closeButton.data("effeckt"));

        // WEIRD BUG
        // Have to trigger redraw or it sometimes leaves
        // behind a black box (Chrome 27.0.1453.116)
        EffecktOffScreenNav.nav.hide();
        var blah = EffecktOffScreenNav.nav.width();
        EffecktOffScreenNav.nav.show();

        $("html").removeClass("md-perspective");

      }, 500);

    }    

  }

};

EffecktOffScreenNav.init();

});

;require.register("routers/router", function(exports, require, module) {
var NewTodoView, Router, StatsView, TodoView, Todos, TodosView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Todos = require('models/todos');

NewTodoView = require('views/new_todo_view');

StatsView = require('views/stats_view');

TodoView = require('views/todo_view');

TodosView = require('views/todos_view');

module.exports = Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    _ref = Router.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Router.prototype.routes = {
    '': 'home'
  };

  Router.prototype.initialize = function() {
    this.todos = new Todos;
    this.statsView = new StatsView({
      collection: this.todos
    });
    this.newTodoView = new NewTodoView({
      collection: this.todos
    });
    return this.todosView = new TodosView({
      collection: this.todos
    });
  };

  Router.prototype.home = function() {
    return this.todos.fetch();
  };

  return Router;

})(Backbone.Router);

});

;require.register("routers/router", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var NewTodoView, Router, StatsView, TodoView, Todos, TodosView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Todos = require('models/todos');

NewTodoView = require('views/new_todo_view');

StatsView = require('views/stats_view');

TodoView = require('views/todo_view');

TodosView = require('views/todos_view');

module.exports = Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    _ref = Router.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Router.prototype.routes = {
    '': 'home'
  };

  Router.prototype.initialize = function() {
    this.todos = new Todos;
    this.statsView = new StatsView({
      collection: this.todos
    });
    this.newTodoView = new NewTodoView({
      collection: this.todos
    });
    return this.todosView = new TodosView({
      collection: this.todos
    });
  };

  Router.prototype.home = function() {
    return this.todos.fetch();
  };

  return Router;

})(Backbone.Router);

});

;require.register("views/new_todo_view", function(exports, require, module) {
var BaseView, NewTodoView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseView = require('./view');

module.exports = NewTodoView = (function(_super) {
  __extends(NewTodoView, _super);

  function NewTodoView() {
    _ref = NewTodoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NewTodoView.prototype.el = '#new-todo-view';

  NewTodoView.prototype.events = {
    'keypress #new-todo': function(e) {
      if (e.keyCode === 13) {
        return this.createTodo();
      }
    },
    'click #new-todo-submit': 'createTodo',
    'focus #new-todo': 'showButton',
    'focusout #new-todo': 'hideButton'
  };

  NewTodoView.prototype.newAttributes = function() {
    var attributes;

    attributes = {
      order: this.collection.nextOrder()
    };
    if (this.$('#new-todo').val()) {
      attributes.content = this.$('#new-todo').val();
    }
    return attributes;
  };

  NewTodoView.prototype.createTodo = function() {
    this.collection.create(this.newAttributes(), {
      validate: true
    });
    return this.$('#new-todo').val('');
  };

  NewTodoView.prototype.showButton = function() {
    var button;

    button = this.$('#new-todo-submit');
    return button.addClass('display');
  };

  NewTodoView.prototype.hideButton = function() {
    var button;

    button = this.$('#new-todo-submit');
    return button.removeClass('display');
  };

  return NewTodoView;

})(BaseView);

});

;require.register("views/new_todo_view", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var BaseView, NewTodoView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseView = require('./view');

module.exports = NewTodoView = (function(_super) {
  __extends(NewTodoView, _super);

  function NewTodoView() {
    _ref = NewTodoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NewTodoView.prototype.el = '#new-todo-view';

  NewTodoView.prototype.events = {
    'keypress #new-todo': function(e) {
      if (e.keyCode === 13) {
        return this.createTodo();
      }
    },
    'click #new-todo-submit': 'createTodo',
    'focus #new-todo': 'showButton',
    'focusout #new-todo': 'hideButton'
  };

  NewTodoView.prototype.newAttributes = function() {
    var attributes;
    attributes = {
      order: this.collection.nextOrder()
    };
    if (this.$('#new-todo').val()) {
      attributes.content = this.$('#new-todo').val();
    }
    return attributes;
  };

  NewTodoView.prototype.createTodo = function() {
    this.collection.create(this.newAttributes(), {
      validate: true
    });
    return this.$('#new-todo').val('');
  };

  NewTodoView.prototype.showButton = function() {
    var button;
    button = this.$('#new-todo-submit');
    return button.addClass('display');
  };

  NewTodoView.prototype.hideButton = function() {
    var button;
    button = this.$('#new-todo-submit');
    return button.removeClass('display');
  };

  return NewTodoView;

})(BaseView);

});

;require.register("views/stats_view", function(exports, require, module) {
var StatsView, View, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

module.exports = StatsView = (function(_super) {
  __extends(StatsView, _super);

  function StatsView() {
    this.render = __bind(this.render, this);    _ref = StatsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  StatsView.prototype.logging = true;

  StatsView.prototype.template = require('./templates/stats');

  StatsView.prototype.el = '.stats-view';

  StatsView.prototype.events = {
    'click .todo-clear': 'clearCompleted'
  };

  StatsView.prototype.initialize = function() {
    return this.collection.on('all', this.render, this);
  };

  StatsView.prototype.render = function() {
    var generatedHTML;

    generatedHTML = this.template(this.getRenderData());
    $log('rendering stats', generatedHTML);
    this.$el.html(generatedHTML);
    return this;
  };

  StatsView.prototype.getRenderData = function() {
    return {
      stats: {
        total: this.collection.length,
        done: this.collection.done().length,
        remaining: this.collection.remaining().length
      }
    };
  };

  StatsView.prototype.clearCompleted = function() {
    return this.collection.clearCompleted();
  };

  return StatsView;

})(View);

});

;require.register("views/stats_view", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var StatsView, View, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

module.exports = StatsView = (function(_super) {
  __extends(StatsView, _super);

  function StatsView() {
    this.render = __bind(this.render, this);
    _ref = StatsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  StatsView.prototype.logging = true;

  StatsView.prototype.template = require('./templates/stats');

  StatsView.prototype.el = '.stats-view';

  StatsView.prototype.events = {
    'click .todo-clear': 'clearCompleted'
  };

  StatsView.prototype.initialize = function() {
    return this.collection.on('all', this.render, this);
  };

  StatsView.prototype.render = function() {
    var generatedHTML;
    generatedHTML = this.template(this.getRenderData());
    $log('rendering stats', generatedHTML);
    this.$el.html(generatedHTML);
    return this;
  };

  StatsView.prototype.getRenderData = function() {
    return {
      stats: {
        total: this.collection.length,
        done: this.collection.done().length,
        remaining: this.collection.remaining().length
      }
    };
  };

  StatsView.prototype.clearCompleted = function() {
    return this.collection.clearCompleted();
  };

  return StatsView;

})(View);

});

;require.register("views/templates/stats", function(exports, require, module) {
module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <span class=\"todo-count\">\n    باقي\n    <span class=\"number\">";
  stack1 = depth0.stats;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.remaining;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "</span>\n    <span class=\"word\">\n      مهام\n    </span>\n    \n  </span>\n";
  return buffer;}

function program3(depth0,data) {
  
  
  return "\n  <a class=\"todo-clear topcoat-notification\">\n    حذف المهام المكتملة\n    <span class=\"word-done\">\n    </span>\n  </span>";}

  stack1 = depth0.stats;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.total;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<br>\n\n";
  stack1 = depth0.stats;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.done;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n";
  return buffer;});
});

;require.register("views/templates/todo", function(exports, require, module) {
module.exports = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  return "done";}

function program3(depth0,data) {
  
  
  return "checked=\"checked\"";}

  buffer += "\n<div class=\"todo ";
  stack1 = depth0.todo;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.done;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n\n 	<label class=\"topcoat-checkbox check\">\n	  <input type=\"checkbox\" class=\"check\" ";
  stack1 = depth0.todo;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.done;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n	  <div class=\"topcoat-checkbox__checkmark\"></div>\n	</label>\n\n	<div class=\"todo-content\">";
  stack1 = depth0.todo;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.content;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\n		<span class=\"todo-destroy\"></span>\n	</div>\n\n	<div class=\"edit\">\n	<input class=\"todo-input\" type=\"text\" value=\"";
  stack1 = depth0.todo;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.content;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\">\n	</div>\n\n</div>\n\n\n\n\n\n\n";
  return buffer;});
});

;require.register("views/todo_view", function(exports, require, module) {
var TodoView, View, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

module.exports = TodoView = (function(_super) {
  __extends(TodoView, _super);

  function TodoView() {
    this.update = __bind(this.update, this);    _ref = TodoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodoView.prototype.template = require('./templates/todo');

  TodoView.prototype.tagName = 'li';

  TodoView.prototype.events = {
    'click .check': 'toggleDone',
    'dblclick .todo-content': 'edit',
    'focusout .todo-input': 'update',
    'keypress .todo-input': 'updateOnEnter',
    'click .todo-destroy': 'clear'
  };

  TodoView.prototype.getRenderData = function() {
    return {
      todo: this.model.toJSON()
    };
  };

  TodoView.prototype.render = function() {
    var generatedHTML;

    generatedHTML = this.template(this.getRenderData());
    $log('rendering todo html', generatedHTML);
    this.$el.html(generatedHTML);
    return this;
  };

  TodoView.prototype.toggleDone = function() {
    return this.model.toggle();
  };

  TodoView.prototype.edit = function() {
    console.log('start edit');
    this.$el.addClass('editing');
    return $('.todo-input').focus();
  };

  TodoView.prototype.update = function() {
    console.log('called update method');
    this.model.save({
      content: this.$('.todo-input').val()
    });
    return this.$el.removeClass('editing');
  };

  TodoView.prototype.updateOnEnter = function(event) {
    if (event.keyCode === 13) {
      return this.update();
    }
  };

  TodoView.prototype.clear = function() {
    return this.model.clear();
  };

  return TodoView;

})(View);

});

;require.register("views/todo_view", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var TodoView, View, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

module.exports = TodoView = (function(_super) {
  __extends(TodoView, _super);

  function TodoView() {
    this.update = __bind(this.update, this);
    _ref = TodoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodoView.prototype.template = require('./templates/todo');

  TodoView.prototype.tagName = 'li';

  TodoView.prototype.events = {
    'click .check': 'toggleDone',
    'dblclick .todo-content': 'edit',
    'focusout .todo-input': 'update',
    'keypress .todo-input': 'updateOnEnter',
    'click .todo-destroy': 'clear'
  };

  TodoView.prototype.getRenderData = function() {
    return {
      todo: this.model.toJSON()
    };
  };

  TodoView.prototype.render = function() {
    var generatedHTML;
    generatedHTML = this.template(this.getRenderData());
    $log('rendering todo html', generatedHTML);
    this.$el.html(generatedHTML);
    return this;
  };

  TodoView.prototype.toggleDone = function() {
    return this.model.toggle();
  };

  TodoView.prototype.edit = function() {
    console.log('start edit');
    this.$el.addClass('editing');
    return $('.todo-input').focus();
  };

  TodoView.prototype.update = function() {
    console.log('called update method');
    this.model.save({
      content: this.$('.todo-input').val()
    });
    return this.$el.removeClass('editing');
  };

  TodoView.prototype.updateOnEnter = function(event) {
    if (event.keyCode === 13) {
      return this.update();
    }
  };

  TodoView.prototype.clear = function() {
    return this.model.clear();
  };

  return TodoView;

})(View);

});

;require.register("views/todos_view", function(exports, require, module) {
var TodoView, TodosView, View, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

TodoView = require('./todo_view');

module.exports = TodosView = (function(_super) {
  __extends(TodosView, _super);

  function TodosView() {
    _ref = TodosView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodosView.prototype.el = '#todos-view';

  TodosView.prototype.render = function() {
    var todo, view, _i, _len, _ref1, _results;

    console.log("test console log");
    console.log(this);
    this.$el.html('');
    _ref1 = this.collection.models;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      todo = _ref1[_i];
      view = new TodoView({
        model: todo
      });
      _results.push(this.$el.append(view.render().el));
    }
    return _results;
  };

  TodosView.prototype.initialize = function() {
    this.listenTo(this.collection, 'sync', this.render);
    return this.listenTo(this.collection, 'destroy', this.render);
  };

  return TodosView;

})(View);

});

;require.register("views/todos_view", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
var TodoView, TodosView, View, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

TodoView = require('./todo_view');

module.exports = TodosView = (function(_super) {
  __extends(TodosView, _super);

  function TodosView() {
    _ref = TodosView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodosView.prototype.el = '#todos-view';

  TodosView.prototype.render = function() {
    var todo, view, _i, _len, _ref1, _results;
    console.log("test console log");
    console.log(this);
    this.$el.html('');
    _ref1 = this.collection.models;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      todo = _ref1[_i];
      view = new TodoView({
        model: todo
      });
      _results.push(this.$el.append(view.render().el));
    }
    return _results;
  };

  TodosView.prototype.initialize = function() {
    this.listenTo(this.collection, 'sync', this.render);
    return this.listenTo(this.collection, 'destroy', this.render);
  };

  return TodosView;

})(View);

});

;require.register("views/view", function(exports, require, module) {
" BadassView add 3 basic bits of functionality to a normal Backbone.View\n1) Auto-logging of initialize, render & save\n2) Auto setting constructor args as attributes on view instances\n3) Short elm() to access an html element based on it's name attribute";
var BadassView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = BadassView = (function(_super) {
  __extends(BadassView, _super);

  BadassView.prototype.logging = false;

  BadassView.prototype.autoSetConstructorArgs = true;

  function BadassView(args) {
    var attr, value;

    if ((args != null) && (args.autoSetConstructorArgs != null)) {
      this.autoSetConstructorArgs = args.autoSetConstructorArgs;
    }
    if (this.autoSetConstructorArgs) {
      for (attr in args) {
        if (!__hasProp.call(args, attr)) continue;
        value = args[attr];
        this[attr] = value;
      }
    }
    if (this.logging) {
      this.enableLogging();
    }
    Backbone.View.prototype.constructor.apply(this, arguments);
  }

  BadassView.prototype.enableLogging = function() {
    var _this = this;

    this.viewTypeName = this.constructor.name;
    if (this.initialize != null) {
      this.initialize = _.wrap(this.initialize, function(fn, args) {
        $log("" + _this.viewTypeName + ".init", args);
        return fn.call(_this, args);
      });
    }
    if (this.render != null) {
      this.render = _.wrap(this.render, function(fn, args) {
        $log("" + _this.viewTypeName + ".render", "model", _this.model, "collection", _this.collection);
        return fn.call(_this, args);
      });
    }
    if (this.save != null) {
      return this.save = _.wrap(this.save, function(fn, args) {
        $log("" + _this.viewTypeName + ".save", args);
        return fn.call(_this, args);
      });
    }
  };

  BadassView.prototype.elm = function(attr) {
    return this.$("[name='" + attr + "']");
  };

  return BadassView;

})(Backbone.View);

});

;require.register("views/view", function(exports, require, module) {
// Generated by CoffeeScript 1.6.3
" BadassView add 3 basic bits of functionality to a normal Backbone.View\n1) Auto-logging of initialize, render & save\n2) Auto setting constructor args as attributes on view instances\n3) Short elm() to access an html element based on it's name attribute";
var BadassView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = BadassView = (function(_super) {
  __extends(BadassView, _super);

  BadassView.prototype.logging = false;

  BadassView.prototype.autoSetConstructorArgs = true;

  function BadassView(args) {
    var attr, value;
    if ((args != null) && (args.autoSetConstructorArgs != null)) {
      this.autoSetConstructorArgs = args.autoSetConstructorArgs;
    }
    if (this.autoSetConstructorArgs) {
      for (attr in args) {
        if (!__hasProp.call(args, attr)) continue;
        value = args[attr];
        this[attr] = value;
      }
    }
    if (this.logging) {
      this.enableLogging();
    }
    Backbone.View.prototype.constructor.apply(this, arguments);
  }

  BadassView.prototype.enableLogging = function() {
    var _this = this;
    this.viewTypeName = this.constructor.name;
    if (this.initialize != null) {
      this.initialize = _.wrap(this.initialize, function(fn, args) {
        $log("" + _this.viewTypeName + ".init", args);
        return fn.call(_this, args);
      });
    }
    if (this.render != null) {
      this.render = _.wrap(this.render, function(fn, args) {
        $log("" + _this.viewTypeName + ".render", "model", _this.model, "collection", _this.collection);
        return fn.call(_this, args);
      });
    }
    if (this.save != null) {
      return this.save = _.wrap(this.save, function(fn, args) {
        $log("" + _this.viewTypeName + ".save", args);
        return fn.call(_this, args);
      });
    }
  };

  BadassView.prototype.elm = function(attr) {
    return this.$("[name='" + attr + "']");
  };

  return BadassView;

})(Backbone.View);

});

;
//@ sourceMappingURL=app.js.map