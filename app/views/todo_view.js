// Generated by CoffeeScript 1.6.3
var TodoView, View, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

View = require('./view');

module.exports = TodoView = (function(_super) {
  __extends(TodoView, _super);

  function TodoView() {
    this.update = __bind(this.update, this);
    _ref = TodoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TodoView.prototype.template = require('./templates/todo');

  TodoView.prototype.tagName = 'li';

  TodoView.prototype.events = {
    'click .check': 'toggleDone',
    'dblclick .todo-content': 'edit',
    'focusout .todo-input': 'update',
    'keypress .todo-input': 'updateOnEnter',
    'click .todo-destroy': 'clear'
  };

  TodoView.prototype.getRenderData = function() {
    return {
      todo: this.model.toJSON()
    };
  };

  TodoView.prototype.render = function() {
    var generatedHTML;
    generatedHTML = this.template(this.getRenderData());
    this.$el.html(generatedHTML);
    return this;
  };

  TodoView.prototype.toggleDone = function() {
    return this.model.toggle();
  };

  TodoView.prototype.edit = function() {
    console.log('start edit');
    this.$el.addClass('editing');
    return $('.todo-input').focus();
  };

  TodoView.prototype.update = function() {
    console.log('called update method');
    this.model.save({
      content: this.$('.todo-input').val()
    });
    return this.$el.removeClass('editing');
  };

  TodoView.prototype.updateOnEnter = function(event) {
    if (event.keyCode === 13) {
      return this.update();
    }
  };

  TodoView.prototype.clear = function() {
    return this.model.clear();
  };

  return TodoView;

})(View);
